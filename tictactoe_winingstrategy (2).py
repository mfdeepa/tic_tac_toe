# -*- coding: utf-8 -*-
"""ticTacToe_winingstrategy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1869D9Z0m46rwNCTlzUrFo656ntWyWmyK
"""

def solve(board):
  n = len(board)
  symbol = '0'
  # check row
  for i in range(n):
    is_sol = True
    for j in range(n):
      if board[i][j] != '0':
        is_sol = False
        break
    if is_sol == True:
      return True
  # check col
  for i in range(n):
    is_sol = True
    for j in range(n):
      if board[j][i] != '0':
        is_sol = False
        break
    if is_sol == True:
      return True
  # left diagonal
  for i in range(n):
    is_sol = True
    for j in range(i+1):
      if i == j:
        if board[i][j] != '0':
          is_sol = False
          break
    if is_sol == True:
      return True
  #right diagonal
  for i in range(n-1,-1,-1):
    is_sol = True
    for j in range(i+1):
      if i == j:
        if board[i][j] != '0':
          is_sol = False
          break
    if is_sol == True:
      return True


if __name__ == '__main__':
  #board = [['0','0','-'],['0','0','0'],['-','-','-']]       #row wise winner
  #board = [['0','0','-'],['0','-','0'],['0','-','-']]       # col wise winner
  #board = [['0','-','-'],['-','0','-'],['-','-','0']]       # left diagonal winner
  board = [['-','-','0'],['-','0','-'],['0','-','-']]       # right diagonal winner
  print(solve(board))


# TC - O(N*N), SC - O(1)

"""Check the winner in O(N)"""

def check_winner(board,row,col):
  n = len(board)
  #row winner
  row = row
  col = col
  symbol = '0'
  is_sol = True
  for i in range(n):
    if board[row][i] != symbol:
      is_sol = False
      break
  if is_sol == True:
    return True
  #col winner
  row = row
  col = col
  is_sol = True
  for i in range(n):
    if board[i][col] != symbol:
      is_sol = False
      break
  if is_sol == True:
    return True

  #left diagonal
  i = 0
  j = 0
  is_sol = True
  while i < n and j < n:
    if board[i][j] != symbol:
      is_sol = False
      break
    i += 1
    j += 1
  if is_sol == True:
    return True

  #right diagonal
  i = n-1
  j = n-1
  is_sol = True
  while i >= 0 and j >= 0:
    if board[i][j] != symbol:
      is_sol = False
      break
    i -= 1
    j -= 1
  if is_sol == True:
    return True

if __name__ == '__main__':
  board = [['0','0','-'],['0','0','0'],['-','-','-']]       #row wise winner
  print(check_winner(board,1,0), "- row wise winner")
  print(" ")
  board = [['0','0','-'],['0','-','0'],['0','-','-']]       # col wise winner
  print(check_winner(board,0,1), "- col wise winner")
  print()
  board = [['0','-','-'],['-','0','-'],['-','-','0']]    # left diagonal winner
  print(check_winner(board,0,0), "- left diagonal wise winner")
  print()
  board = [['-','-','0'],['-','0','-'],['0','-','-']]   # right diagonal winner
  print(check_winner(board,2,0), "- right diagonal wise winner")
  print()
  board = [['0','-','-'],['0','-','0'],['-','-','-']]
  print(check_winner(board,1,1), "- no winner")
  print()


# TC - O(N) AND SC - O(1)

"""check winner on O(1)"""

def check_winner(board, row, col, row_dictt, col_dictt, diag):
  n = len(board)
  symbol = '0'

  #row winner
  row = row
  col = col
  if row not in row_dictt:
    row_dictt[row] = []
  else:
    ls = row_dictt[row]
    ls.append(symbol)
  key_value = row_dictt.get(row)
  symbol_count = key_value.count(symbol)
  if symbol_count == n:
    return True

  #col winner
  if col not in col_dictt:
    col_dictt[col] = []
  else:
    ls = col_dictt[col]
    ls.append(symbol)
  key_value = row_dictt.get(row)
  symbol_count = key_value.count(symbol)
  if symbol_count == n:
    return True

    #diagonal winner
  if row == col:
    if row not in diag:
      diag[row] = []
    else:
      ls = diag[row]
      ls.append(symbol)
  key_value = row_dictt.get(row)
  symbol_count = key_value.count(symbol)
  if symbol_count == n:
    return True

if __name__ == '__main__':
  board = [['0','0','-'],['0','0','0'],['-','-','-']]       #row wise winner
  print(check_winner(board,1,0,{1:['0','0']},{},{}), "- row wise winner")
  board = [['0','0','-'],['-','0','0'],['0','0','-']]       # col wise winner
  print(check_winner(board,0,1,{},{1:['0','0']},{}), "- col wise winner")
  board = [['0','-','-'],['-','0','-'],['-','-','0']]    # left diagonal winner
  print(check_winner(board,0,0,{},{},{}), "- left diagonal wise winner")
  board = [['-','-','0'],['-','0','-'],['0','-','-']]   # right diagonal winner
  print(check_winner(board,2,0,{},{},{}), "- right diagonal wise winner")
  board = [['0','-','-'],['0','-','0'],['-','-','-']]
  print(check_winner(board,1,1,{},{},{}), "- no winner")

